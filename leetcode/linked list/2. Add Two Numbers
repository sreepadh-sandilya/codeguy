/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void insertattail(ListNode* &anshead,ListNode* &anstail,ListNode* n)
    {
        if(anshead==NULL)
        {
            anshead=n;
            anstail=n;
        }
        else
        {
            anstail->next=n;
            anstail=anstail->next;

        }

    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        ListNode* temp1=l1;
        ListNode* temp2=l2;
        int carry=0;
        
        ListNode* anshead=NULL;
        ListNode* anstail=NULL;
        while(temp1!=NULL && temp2!=NULL)
        {
            int k= temp1->val+temp2->val+carry;
            
            ListNode* n=new ListNode(k%10);

            
            temp1=temp1->next;
            
            temp2=temp2->next;
            carry=k/10;
            insertattail(anshead,anstail,n);
            
            
           

        }
        
        if(temp1!=NULL)
        {
            while(temp1!=NULL){
            int k= temp1->val+carry;
            temp1=temp1->next;
            
            carry=k/10;
            ListNode* n=new ListNode(k%10);
            insertattail(anshead,anstail,n);
            }


        }

        if(temp2!=NULL)
        {
            while(temp2!=NULL){
            int k= temp2->val+carry;
            temp2=temp2->next;
            
            carry=k/10;
            ListNode* n=new ListNode(k%10);
            insertattail(anshead,anstail,n);
            }


        }

        if(carry!=0)
        {
            ListNode* n=new ListNode(carry);
            insertattail(anshead,anstail,n);
        }

        return anshead;

        
    }
};
