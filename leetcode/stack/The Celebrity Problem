class Solution 
{
    public:
    //time complexity is o(n^2)
    int celebrity(vector<vector<int> >& m, int n) 
    {
        // code here 
        // cout<<1<<endl;
        map<int,int>p;
        for(int i=0;i<n;i++)
        {
            p[i]=0;
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(m[i][j]==1)
                {
                    p[i]=1;
                }
            }
        }
        int x=-1;
        for(auto i:p)
        {
            // cout<<i.first<<endl;
            if(i.second==0)
            {
                 x=i.first;
                 break;
            }
        }
        if(x==-1)
        {
            return -1;
        }
        // cout<<x<<endl;
        int y=0;
        for(int i=0;i<n;i++)
        {
            if(i!=x && m[i][x]==0)
            {
                y=1;
                break;
            }
        }
        if(y==0)
        {
            return x;
        }
        return -1;
    }
};
// the below solution is optimized and time complexity is o(n)..

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& m, int n) 
    {
        // code here 
        stack<int>st;
        for(int i=0;i<n;i++)
        {
            st.push(i);
            
        }
        
        while(st.size()!=1)
        {
            int x=st.top();
            st.pop();
            int y=st.top();
            st.pop();
            if(m[x][y]==0){
                st.push(x);
            }
            else
            {
                st.push(y);
            }
        }
        
        int x=st.top();
        int y=0;
        for(int i=0;i<n;i++)
        {
            if(m[x][i]==1)
            {
                return -1;
                
            }
            if(i!=x && m[i][x]==0)
            {
                return -1;
            }
        }
        
        return x;
        
        
    }
};
