class Solution{
  public:
    vector<int> nextsmall(int *arr,int n)
    {
       vector<int>ans(n);
       stack<int>st;
       st.push(-1);
       for(int i=n-1;i>=0;i--){
       while(st.top()!=-1 && arr[st.top()]>=arr[i]){
           st.pop();

       }

       ans[i]=st.top();
       st.push(i);
       }
       return ans;
    }

    vector<int> prevsmall(int *arr,int n)
    {
       vector<int>ans(n);
        stack<int>st;
       st.push(-1);
       for(int i=0;i<n;i++){
       while(st.top()!=-1 && arr[st.top()]>=arr[i]){
           st.pop();

       }
       ans[i]=st.top();
       st.push(i);
       }
       return ans;
    }
    int largestRectangleArea(int *heights,int n) {
        // int n=heights.size();
        vector<int>next(n),prev(n);
        next=nextsmall(heights,n);
        prev=prevsmall(heights,n);
        int area=INT_MIN;
        for(int i=0;i<n;i++)
        {
            if(next[i]==-1)
            {
                next[i]=n;
            }
            int k=heights[i]*(next[i]-prev[i]-1);
            area=max(area,k);
        }
        return area;
    }
    int maxArea(int M[MAX][MAX], int n, int m) {
        // Your code here
        int area=largestRectangleArea(M[0],m);
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(M[i][j]!=0){
                M[i][j]+= M[i-1][j];
                }
                else
                {
                    M[i][j]=0;
                }
            }
            int k=largestRectangleArea(M[i],m);
            area=max(area,k);
        }
        
        return area;
        
    }
};
