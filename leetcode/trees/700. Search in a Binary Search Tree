/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* r;
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root==NULL)
        {
            return NULL;
        }
        if(root->val<val)
        {
            root=root->right;
        }
        else if(root->val>val)
        {
            root=root->left;
        }

        if(root==NULL)
        {
            return root;
        }
        searchBST(root->left,val);
        if(root->val==val)
        {
            r=root;
            return root;
        }
        searchBST(root->right,val);
        return r;   
    }
};

// another method with o(n) time complexity:.........................................................................................................

class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root->val==val)
        {
            return root;
        }
        TreeNode* temp=root;
        while(temp!=NULL)
        {
            if(temp->val>val)
            {
                temp=temp->left;
            }
            else if(temp->val<val)
            {
                temp=temp->right;
            }
            else
            {
                return temp;
            }
        }

        temp=NULL;
        return temp;

        


        
    }
};
