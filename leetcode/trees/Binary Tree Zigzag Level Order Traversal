/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>v;
        // vector<int>s;
        queue<TreeNode*>q;
        stack<int>st;
        q.push(root);
        q.push(NULL);
        int n=0;
        while(!q.empty())
        {
            vector<int>s;
            
            while(q.front()!=NULL)
            {
                TreeNode* front=q.front();
                if(n%2!=0)
                {
                    if(front->left!=NULL){
                    q.push(front->left);
                    }
                    if(front->right!=NULL){
                    q.push(front->right);
                    }
                    // st.push(front->right);
                    st.push(front->val);
                    q.pop();
                }
                else
                {
                    if(front->left!=NULL){
                    q.push(front->left);
                    }
                    
                    if(front->right!=NULL){
                    q.push(front->right);    
                    }
                    s.push_back(front->val);
                    q.pop();              
                }
                if(q.front()==NULL)
                {
                    q.push(NULL);
                }

            }
            if(!st.empty())
                {
                    while(!st.empty())
                    {
                        int x=st.top();
                        s.push_back(x);
                        st.pop();
                    }
                }
            n++;    
            q.pop();
            if(!s.empty()){
            v.push_back(s);
            }

        }

        return v;
        
        // no need to use the stack...we can use reverse(v.begin(),v.end()) inbuilt vector function to reverse the vector.. and push it into the multidimensional vector
        
    }
};
