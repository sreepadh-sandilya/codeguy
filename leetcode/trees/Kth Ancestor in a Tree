vector<int>v;
void solve(Node *root, int k, int node,vector<int>v,int &n)
{
    if(root==NULL)
    {
        return;
    }
    v.push_back(root->data);
    solve(root->left,k,node,v,n);
    solve(root->right,k,node,v,n);
    if(v.back()==node)
    {
        if(v.size()<=k)
       {
        n=-1;
       }
       else{
        n=v[v.size()-k-1];
       }
    }
    
    
}
int kthAncestor(Node *root, int k, int node)
{
    
    int n;
    vector<int>v;
    solve(root,k,node,v,n);
    return n;
    
    
    // Code here
}

// another method to slove the problem:
Node* solve(Node *root, int &k, int node)
{
    if(root==NULL)
    {
        return NULL;
    }
    if(root->data==node)
    {
        return root;
    }
    Node* left= solve(root->left, k, node);
    Node* right= solve(root->right, k, node);
    
    if(left!=NULL && right==NULL)
    {
        k--;
        if(k<=0)
        {
            k=INT_MAX;
            return root;
        }
        return left;
    }
    else if(left==NULL && right!=NULL)
    {
        k--;
        if(k<=0)
        {
            k=INT_MAX;
            return root;
        }
        return right;
    }
    else
    {
        return NULL;
    }
}
    

    

int kthAncestor(Node *root, int k, int node)
{
    // Code here
    
    Node* ans=solve(root, k, node);
    if(ans->data==node)
    {
        return -1;
    }
    return ans->data;
}
