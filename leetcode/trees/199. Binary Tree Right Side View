/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
    vector<int>v;
    if(root==NULL)
    {
        return v;
    }
    map<int,int>m;
    q.push(make_pair(root,0));
    
    
    while(!q.empty())
    {
        pair<TreeNode*,int>temp=q.front();
        q.pop();
        TreeNode* front=temp.first;
        
        int lvl=(temp.second);
        
            m[lvl]=front->val;
        
        if(front->left)
        {
            q.push(make_pair(front->left,lvl+1));
        }
        if(front->right)
        {
            q.push(make_pair(front->right,lvl+1));
        }
        
        
        
    }
    
    for(auto i:m)
    {
        v.push_back(i.second);
    }
    return v;
        
    }
};
